// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc250.FRCDeepSpace2019;

import org.usfirst.frc250.FRCDeepSpace2019.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import org.usfirst.frc250.FRCDeepSpace2019.subsystems.*;
import org.usfirst.frc250.FRCDeepSpace2019.Utilities;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import org.usfirst.frc250.FRCDeepSpace2019.XBoxTriggerButton;

import badlog.lib.BadLog;
import org.usfirst.frc250.FRCDeepSpace2019.LogUtil;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton driveReverse;
    public JoystickButton driveTurnDisabled;
    public JoystickButton driveHalfPower;
    public JoystickButton driveForward;
    public JoystickButton hatchEjectD;
    public JoystickButton hatchGripD;
    public Joystick driverController;
    public JoystickButton hatchGrip;
    public JoystickButton cargoLock;
    public Joystick manipController;
    public JoystickButton releaseFrontClimb;
    public JoystickButton t2Climb;
    public JoystickButton climbWheelsForward;
    public JoystickButton pullUpLegs;
    public Joystick climbController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public XBoxPOVButton hatchExtend;
    public XBoxPOVButton hatchRetract;
    public XBoxTriggerButton hatchEject;
    public XBoxTriggerButton cargoPunch;

    public OI() {

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        climbController = new Joystick(2);
        pullUpLegs = new JoystickButton(climbController, 8);
        pullUpLegs.whenPressed(new RearClimberZeroPos());
        climbWheelsForward = new JoystickButton(climbController, 7);
        climbWheelsForward.whileHeld(new ClimbWheelsForward());
        t2Climb = new JoystickButton(climbController, 5);
        t2Climb.whenPressed(new ClimbRaiseT2());
        releaseFrontClimb = new JoystickButton(climbController, 6);
        releaseFrontClimb.whenPressed(new FrontClimberReleasePoint());
        manipController = new Joystick(1);
        cargoLock = new JoystickButton(manipController, 6);
        cargoLock.whenPressed(new CargoLock());
        hatchGrip = new JoystickButton(manipController, 5);
        hatchGrip.whenPressed(new HatchGrip());
        driverController = new Joystick(0);
        hatchGripD = new JoystickButton(driverController, 6);
        hatchGripD.whenPressed(new HatchGrip());
        hatchEjectD = new JoystickButton(driverController, 9);
        hatchEjectD.whenPressed(new HatchEject());
        driveForward = new JoystickButton(driverController, 7);
        driveForward.whileHeld(new DriveModeForward());
        driveHalfPower = new JoystickButton(driverController, 1);
        driveHalfPower.whileHeld(new DriveHalfPower());
        driveTurnDisabled = new JoystickButton(driverController, 2);
        driveTurnDisabled.whileHeld(new DriveModeTurnDisable());
        driveReverse = new JoystickButton(driverController, 8);
        driveReverse.whileHeld(new DriveReverseToggle());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("CargoLock", new CargoLock());
        SmartDashboard.putData("CargoUnlock", new CargoUnlock());
        SmartDashboard.putData("RCSDeploy", new RCSDeploy());
        SmartDashboard.putData("RCSRetract", new RCSRetract());
        SmartDashboard.putData("HatchFloorDown", new HatchFloorDown());
        SmartDashboard.putData("HatchFloorUp", new HatchFloorUp());
        SmartDashboard.putData("BeltRollUp", new BeltRollUp());
        SmartDashboard.putData("BeltRollDown", new BeltRollDown());
        SmartDashboard.putData("HatchEject", new HatchEject());
        SmartDashboard.putData("HatchGrip", new HatchGrip());
        SmartDashboard.putData("HatchExtend", new HatchExtend());
        SmartDashboard.putData("HatchRetract", new HatchRetract());
        SmartDashboard.putData("DeployAndStartHFPS", new DeployAndStartHFPS());
        SmartDashboard.putData("DriveTurnDisableToggle", new DriveTurnDisableToggle());
        SmartDashboard.putData("DriveReverseToggle", new DriveReverseToggle());
        SmartDashboard.putData("DriveHalfPowerToggle", new DriveHalfPowerToggle());
        SmartDashboard.putData("DriveTargetDistance", new DriveTargetDistance());
        SmartDashboard.putData("DriveHalfPower", new DriveHalfPower());
        SmartDashboard.putData("DriveModeForward", new DriveModeForward());
        SmartDashboard.putData("DriveModeReverse", new DriveModeReverse());
        SmartDashboard.putData("DockFull", new DockFull());
        SmartDashboard.putData("AutonLeftRocket", new AutonLeftRocket());
        SmartDashboard.putData("AutonRightRocket", new AutonRightRocket());
        SmartDashboard.putData("AttemptDocking", new AttemptDocking());
        SmartDashboard.putData("AutonLeftCargo", new AutonLeftCargo());
        SmartDashboard.putData("AutonRightCargo", new AutonRightCargo());
        SmartDashboard.putData("AttemptDockingCargo", new AttemptDockingCargo());
        SmartDashboard.putData("CargoRelease", new CargoRelease());
        SmartDashboard.putData("AutonHatchEject", new AutonHatchEject());
        SmartDashboard.putData("DriveModeTurnDisable", new DriveModeTurnDisable());
        SmartDashboard.putData("CargoPuncherExtend", new CargoPuncherExtend());
        SmartDashboard.putData("CargoPuncherRetract", new CargoPuncherRetract());
        SmartDashboard.putData("ClimbWheelsForward", new ClimbWheelsForward());
        SmartDashboard.putData("ManualFrontClimbDrive", new ManualFrontClimbDrive());
        SmartDashboard.putData("FrontClimberZeroPos", new FrontClimberZeroPos());
        SmartDashboard.putData("FrontClimberReleasePoint", new FrontClimberReleasePoint());
        SmartDashboard.putData("FrontClimberTopPos", new FrontClimberTopPos());
        SmartDashboard.putData("FrontClimberBottomPos", new FrontClimberBottomPos());
        SmartDashboard.putData("FrontClimberTooHigh", new FrontClimberTooHigh());
        SmartDashboard.putData("FrontClimberTooLow", new FrontClimberTooLow());
        SmartDashboard.putData("RearClimberT2Height", new RearClimberT2Height());
        SmartDashboard.putData("FrontClimberT2ApproachHeight", new FrontClimberT2ApproachHeight());
        SmartDashboard.putData("FrontClimberDriveForwardHeight", new FrontClimberDriveForwardHeight());
        SmartDashboard.putData("ClimbRaiseT2", new ClimbRaiseT2());
        SmartDashboard.putData("ClimbPullUpLegs", new ClimbPullUpLegs());
        SmartDashboard.putData("RearClimberZeroPos", new RearClimberZeroPos());
        SmartDashboard.putData("ToodlePoof", new ToodlePoof());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        hatchExtend = new XBoxPOVButton(manipController, XBoxPOVButton.PovDirection.North);
        hatchExtend.whenPressed(new HatchExtend());

        hatchRetract = new XBoxPOVButton(manipController, XBoxPOVButton.PovDirection.South);
        hatchRetract.whenPressed(new HatchRetract());

       //cargoInD = new XBoxPOVButton(driverController, XBoxPOVButton.PovDirection.Any);
       // cargoInD.whenPressed(new Cargo());

        hatchEject = new XBoxTriggerButton(manipController, 2, .1);
        hatchEject.whenPressed(new HatchEject());

        cargoPunch = new XBoxTriggerButton(manipController, 3, .1);
        cargoPunch.whenPressed(new CargoRelease());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverController() {
        return driverController;
    }

    public Joystick getManipController() {
        return manipController;
    }

    public Joystick getclimbController() {
        return climbController;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public double getYDrive() {
        double Y = Utilities.joystickDeadband(this.driverController.getRawAxis(1), 0.05);
        return Y;
    }

    public double getZDrive() {
        double Z = Utilities.joystickDeadband(this.driverController.getRawAxis(2), 0.05);
        return Z;
    }

    public double getClimbRawTest() {
        double h = Utilities.joystickDeadband(this.manipController.getRawAxis(1), 0.05);
        return h;
    }
}
