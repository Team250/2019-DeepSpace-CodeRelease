// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc250.FRCDeepSpace2019.subsystems;

import org.usfirst.frc250.FRCDeepSpace2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import com.ctre.phoenix.motorcontrol.ControlMode;
import org.usfirst.frc250.FRCDeepSpace2019.Constants;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;

import badlog.lib.BadLog;
import org.usfirst.frc250.FRCDeepSpace2019.LogUtil;
import org.usfirst.frc250.FRCDeepSpace2019.Robot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class FrontClimber extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX climberFrontTalon;
    private Spark climberFrontWheels;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private boolean isDeployed = false;
    private boolean isOffBalanceX = false;
    private boolean isOffBalanceY = false;

    public FrontClimber() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        climberFrontTalon = new WPI_TalonSRX(6);
        
        
        
        climberFrontWheels = new Spark(1);
        addChild("ClimberFrontWheels",climberFrontWheels);
        climberFrontWheels.setInverted(true);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        addChild("ClimberFrontTalon", climberFrontTalon);
        climberFrontTalon.setInverted(true);

        climberFrontTalon.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, Constants.kPIDLoopIdx,
                Constants.kTimeoutMs);
        climberFrontTalon.setSensorPhase(true); // TODO: Verify

        climberFrontTalon.configNominalOutputForward(0, Constants.kTimeoutMs);
        climberFrontTalon.configNominalOutputReverse(0, Constants.kTimeoutMs);
        climberFrontTalon.configPeakOutputForward(.75, Constants.kTimeoutMs);
        climberFrontTalon.configPeakOutputReverse(-.75, Constants.kTimeoutMs);

        climberFrontTalon.configForwardSoftLimitEnable(true);
        climberFrontTalon.configForwardSoftLimitThreshold(16000);

        climberFrontTalon.configReverseSoftLimitEnable(true);
        climberFrontTalon.configReverseSoftLimitThreshold(-33000);

        climberFrontTalon.config_kF(Constants.kPIDLoopIdx, Constants.kGains_Velocit.kF, Constants.kTimeoutMs); // TODO: Verify
        climberFrontTalon.config_kP(Constants.kPIDLoopIdx, Constants.kGains_Velocit.kP, Constants.kTimeoutMs);
        climberFrontTalon.config_kI(Constants.kPIDLoopIdx, Constants.kGains_Velocit.kI, Constants.kTimeoutMs);
        climberFrontTalon.config_kD(Constants.kPIDLoopIdx, Constants.kGains_Velocit.kD, Constants.kTimeoutMs);

        climberFrontTalon.configMotionCruiseVelocity(50000/30, Constants.kTimeoutMs);
        climberFrontTalon.configMotionAcceleration(2220, Constants.kTimeoutMs); //22,000 per second
    }

    int frontClimberTargetPos;
    boolean isCurrentLimit;

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new ManualFrontClimbDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    @Override
    public void periodic() {
        // Put code here to be run every loop
        
        SmartDashboard.putNumber("Front Climber position", climberFrontTalon.getSelectedSensorPosition());
       
        // NAVX logic
        if (!isOffBalanceX && Robot.shared.getPitch() >= Robot.prefs2.getDouble("X Off Balance Threshold")) {
            isOffBalanceX = true;
        } else {
            isOffBalanceX = false;
        }
        if (!isOffBalanceY && Robot.shared.getRoll() >= Robot.prefs2.getDouble("Y Off Balance Threshold")) {
            isOffBalanceY = true;
        } else {
            isOffBalanceY = false;
        }
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public boolean isDeployed() {
        return isDeployed;
    }

    public void setFrontWheelSpeed(double speed){
        climberFrontWheels.setSpeed(speed);
    }

    public double getFrontWheelSpeed(){
        return climberFrontWheels.getSpeed();
    }
    /*********************************************************/
    // NAVX
    public boolean isOffBalanceX() { // should be side to side
        return isOffBalanceX;
    }

    public boolean isOffBalanceY() { // should be front to back
        return isOffBalanceY;
    }

    public void setFrontClimbSpeed(double speed) {
        climberFrontTalon.set(ControlMode.PercentOutput, speed);
    }

    public int getCurrentRawPosition() {
        return climberFrontTalon.getSelectedSensorPosition(0);
    }

    public void setFrontClimberTargetPosition(int position) {
        climberFrontTalon.set(ControlMode.MotionMagic, position);
        frontClimberTargetPos = position;
    }

    public double getFrontClimberTargetPosition() {
        return climberFrontTalon.getClosedLoopTarget(0);
    }

    public boolean isCurrentLimit() {
        return isCurrentLimit;
    }

    public void setCurrentLimitBool(boolean val) {
        isCurrentLimit = val;
    }

    public boolean isAtTargets() {
        double Delta = Math.abs(Math.abs(getFrontClimberTargetPosition()) - Math.abs(getCurrentRawPosition()));
        int threshold = 100;

        return (Delta <= threshold);
    }
}
