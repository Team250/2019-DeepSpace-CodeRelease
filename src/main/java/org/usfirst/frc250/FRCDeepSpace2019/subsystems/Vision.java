// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc250.FRCDeepSpace2019.subsystems;


import org.usfirst.frc250.FRCDeepSpace2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.command.WaitCommand;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.cscore.VideoMode.PixelFormat;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;



// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Vision extends Subsystem {

    private SerialPort cam = null;
    private UsbCamera visionCam = null;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Vision() {

        visionCam = CameraServer.getInstance().startAutomaticCapture("HatchCam", 0);
        visionCam.setVideoMode(PixelFormat.kMJPEG, 320, 240, 115200);
        
        int retry = 0;
        while(cam == null && retry < 10) {
            try {
                System.out.println("Connecting to jevois serial port ...");
                cam = new SerialPort(115200, SerialPort.Port.kUSB1);
                System.out.println("Success!!!");
            } catch (Exception e) {
                System.out.println("We all shook out");
                e.printStackTrace();
                sleep(500);
                System.out.println("Retry" + Integer.toString(retry));
                retry++;
            }
        }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    private double lastKnownAngle = -99.99;
    private double lastKnownDistance = -99.99;
    private String serialStr;
    private double currentDistance;
    private double lastValTime = Timer.getFPGATimestamp();
    private int periodicCounter = 1;

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {


        if(periodicCounter%100 == 0) {
            periodicCounter = 1;
            System.out.println(Double.toString(lastValTime));
            //System.out.println(visionCam.getActualFPS());
        }

        periodicCounter++;

        if(cam != null) {
            try {
                if(cam.getBytesReceived() > 6) {
                    serialStr = cam.readString();
                    String a = serialStr.substring(6,serialStr.indexOf(","));
                    String d = serialStr.substring(serialStr.indexOf(",") + 10);
                    System.out.println(a + " " + d);
                    lastKnownAngle = Double.valueOf(a);
                    lastKnownDistance = Double.valueOf(d);
                }
                
            } catch (Exception e) {
                System.out.print("*");
            }
        }
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public double getTargetAngle(){
        return lastKnownAngle;
    }

    public double getDistance(){
        return lastKnownDistance;
    }

    public void setCurrentDistance(double dist) {
        currentDistance = dist;
    }

    public double getCurrentDistance(){
        return currentDistance;
    }

    public void sleep(int time_ms) {
        try {
            Thread.sleep(time_ms);
        } catch (InterruptedException e) {
            System.out.println("Five more minutes...");
            e.printStackTrace();
        }
    }

    public boolean isConnected() {
        return (cam == null) ? false : true;
    }

    public boolean isValidTarget(){
        return (lastKnownAngle != -99.99) ? true : false;
    }

}

