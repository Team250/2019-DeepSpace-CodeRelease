// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc250.FRCDeepSpace2019.subsystems;


import org.usfirst.frc250.FRCDeepSpace2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class MainHatchSystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private DoubleSolenoid hookSolenoid;
    private DoubleSolenoid extensionSolenoid;
    private DigitalInput mHSLimit;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private boolean hookDeployed = false;
    private boolean hatchExtended = false;
    public MainHatchSystem() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        hookSolenoid = new DoubleSolenoid(0, 1, 6);
        addChild("HookSolenoid",hookSolenoid);
        
        
        extensionSolenoid = new DoubleSolenoid(0, 3, 4);
        addChild("ExtensionSolenoid",extensionSolenoid);
        
        
        mHSLimit = new DigitalInput(4);
        addChild("MHSLimit",mHSLimit);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        hookSolenoid.set(Value.kForward);
        extensionSolenoid.set(Value.kReverse);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        SmartDashboard.putBoolean("Hatch Hook", this.hookDeployed());
        SmartDashboard.putBoolean("Hatch Extended", this.hatchExtended());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public boolean buttonPressed(){
        if(mHSLimit.get()){
            return true;
        }else{
            return false;
        }
    }
    public boolean hookDeployed(){
        return hookDeployed;
    }
    public boolean hatchExtended(){
        return hatchExtended;
    }
    public void deployHook(){
        hookDeployed = true;
        hookSolenoid.set(Value.kForward);
    }
    public void retractHook(){
        hookDeployed = false;
        hookSolenoid.set(Value.kReverse);
    }
    public void extendHatch(){
        hatchExtended = true;
        extensionSolenoid.set(Value.kForward);
    }
    public void retractHatch(){
        hatchExtended = false;
        extensionSolenoid.set(Value.kReverse);
    }
}

