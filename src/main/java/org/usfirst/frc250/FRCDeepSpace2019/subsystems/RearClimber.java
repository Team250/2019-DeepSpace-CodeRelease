// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc250.FRCDeepSpace2019.subsystems;

import org.usfirst.frc250.FRCDeepSpace2019.Robot;
import org.usfirst.frc250.FRCDeepSpace2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.smartdashboard.*;
import com.ctre.phoenix.motorcontrol.ControlMode;
import org.usfirst.frc250.FRCDeepSpace2019.Constants;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;

import badlog.lib.BadLog;
import org.usfirst.frc250.FRCDeepSpace2019.LogUtil;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DigitalInput;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class RearClimber extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX rearClimberTalon;
    private DigitalInput climberLimit;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private boolean isCurrentLimit = false;
    public RearClimber() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        rearClimberTalon = new WPI_TalonSRX(9);
        
        
        
        climberLimit = new DigitalInput(3);
        addChild("ClimberLimit",climberLimit);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        addChild("RearClimberTalon", rearClimberTalon);
        rearClimberTalon.enableCurrentLimit(isCurrentLimit);
        rearClimberTalon.configPeakCurrentLimit( 10, 10);
        rearClimberTalon.configPeakCurrentDuration(200, 10);
        rearClimberTalon.configContinuousCurrentLimit(7, 10);

        rearClimberTalon.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, Constants.kPIDLoopIdx, Constants.kTimeoutMs);
		rearClimberTalon.setSensorPhase(true); //TODO: Verify
		
		rearClimberTalon.configNominalOutputForward(0, Constants.kTimeoutMs);
		rearClimberTalon.configNominalOutputReverse(0, Constants.kTimeoutMs);
		rearClimberTalon.configPeakOutputForward(.75, Constants.kTimeoutMs);
        rearClimberTalon.configPeakOutputReverse(-75, Constants.kTimeoutMs);
        
        rearClimberTalon.configReverseSoftLimitEnable(true);
        rearClimberTalon.configReverseSoftLimitThreshold(0);

        rearClimberTalon.configForwardSoftLimitEnable(true);
        rearClimberTalon.configForwardSoftLimitThreshold(35000);

		rearClimberTalon.config_kF(Constants.kPIDLoopIdx, Constants.kGains_Velocit.kF, Constants.kTimeoutMs); //TODO: Verify
		rearClimberTalon.config_kP(Constants.kPIDLoopIdx, Constants.kGains_Velocit.kP, Constants.kTimeoutMs);
		rearClimberTalon.config_kI(Constants.kPIDLoopIdx, Constants.kGains_Velocit.kI, Constants.kTimeoutMs);
		rearClimberTalon.config_kD(Constants.kPIDLoopIdx, Constants.kGains_Velocit.kD, Constants.kTimeoutMs);

		
		rearClimberTalon.configMotionCruiseVelocity(50000/30, Constants.kTimeoutMs);
        rearClimberTalon.configMotionAcceleration(2220, Constants.kTimeoutMs);

        BadLog.createTopic("Climb/Rear Motor Current", "A", () -> rearClimberTalon.getOutputCurrent(), "hide");
    }

    int rearClimberTargetPos;
    double elevatorMotorPeakCurrent = 0;

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        

        SmartDashboard.putNumber("Rear Climber Position", rearClimberTalon.getSelectedSensorPosition(0));
        SmartDashboard.putNumber("Rear Climber Talon Output", rearClimberTalon.getMotorOutputPercent());
        SmartDashboard.putNumber("Rear Climber Target Position", rearClimberTargetPos);

        // Track current current and update peak
        double elevatorCurrent = rearClimberTalon.getOutputCurrent();
        if (elevatorCurrent > elevatorMotorPeakCurrent) {
            elevatorMotorPeakCurrent = elevatorCurrent;
        }
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void setRearClimbSpeed(double speed) {
        rearClimberTalon.set(ControlMode.PercentOutput, speed);
    }

    public int getCurrentRawPosition() {
        return rearClimberTalon.getSelectedSensorPosition(0);
    }

    public void setRearClimberTargetPosition(int position) {
        rearClimberTalon.set(ControlMode.MotionMagic, position);
        rearClimberTargetPos = position;
    }

    public double getRearClimberTargetPosition() {
        return rearClimberTalon.getClosedLoopTarget(0);
    }
    public boolean isCurrentLimit(){
        return isCurrentLimit;
    }

    public void setCurrentLimitBool(boolean val){
        isCurrentLimit = val;
    }

    public boolean isAtTargets() {
        double Delta = Math.abs(Math.abs(getRearClimberTargetPosition()) - Math.abs(getCurrentRawPosition()));
        int threshold = 100;

        if (Delta <= threshold) {
            return true;
        } else {
            return false;
        }
    }

}
