// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc250.FRCDeepSpace2019.subsystems;

import org.usfirst.frc250.FRCDeepSpace2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;

import badlog.lib.BadLog;
import org.usfirst.frc250.FRCDeepSpace2019.LogUtil;
import org.usfirst.frc250.FRCDeepSpace2019.Robot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.PowerDistributionPanel;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.kauailabs.navx.frc.AHRS; //Documentaion at: https://www.kauailabs.com/public_files/navx-mxp/apidocs/java/com/kauailabs/navx/frc/AHRS.html
import org.usfirst.frc250.FRCDeepSpace2019.Utilities;

/**
 *
 */
public class Shared extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Compressor compressor;
    private PowerDistributionPanel powerDistributionPanel;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static AHRS navX;

    private double lastXAccel;
    private double lastYAccel;
    private boolean collisionDetected;

    public Shared() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        compressor = new Compressor(0);
        addChild("Compressor",compressor);
        
        
        powerDistributionPanel = new PowerDistributionPanel(0);
        addChild("PowerDistributionPanel",powerDistributionPanel);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        navX = new AHRS(edu.wpi.first.wpilibj.SPI.Port.kMXP);

        //Badlog*************************************************
        BadLog.createTopic("Nav-X/Angle", "Degrees", () -> this.getAngle(), "hide");
        BadLog.createTopic("Nav-X/Yaw", "Degrees", () -> this.getYaw(), "hide");
        BadLog.createTopic("Nav-X/Pitch", "Degrees", () -> this.getPitch(), "hide");
        BadLog.createTopic("Nav-X/Roll", "Degrees", () -> this.getRoll(), "hide");
        BadLog.createTopic("Nav-X/X Acceleration", "Degrees", () -> this.getAccelerationX(), "hide");
        BadLog.createTopic("Nav-X/Y Acceleration", "Degrees", () -> this.getAccelerationY(), "hide");
        BadLog.createTopic("Nav-X/X Velocity", "Degrees", () -> this.getVelocityX(), "hide");
        BadLog.createTopic("Nav-X/Y Velocity", "Degrees", () -> this.getVelocityY(), "hide");
        BadLog.createTopic("Nav-X/X Displacement", "Degrees", () -> this.getDisplacementX(), "hide");
        BadLog.createTopic("Nav-X/Y Displacement", "Degrees", () -> this.getDisplacementY(), "hide");
        BadLog.createTopic("Nav-X/Z Displacement", "Degrees", () -> this.getDisplacementZ(), "hide");
        BadLog.createTopicStr("Nav-X/Collision Detected", "Bool", () -> LogUtil.fromBool(this.isCollisionDetected()), "hide");
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        //NAVX Collision Detection
        double currentXAccel = this.getAccelerationX();
        double currentXJerk = currentXAccel - lastXAccel;
        lastXAccel = currentXAccel;
        double currentYAccel = this.getAccelerationY();
        double currentYJerk = currentYAccel - lastYAccel;
        lastYAccel = currentYAccel;

        if(Math.abs(currentXJerk) > Robot.prefs2.getDouble("Collision Threshold") || Math.abs(currentYJerk) > Robot.prefs2.getDouble("Collision Threshold")){
            collisionDetected = true;
        }else{
            collisionDetected = false;
        }

        

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public int startingOrentation = 0;

    public int getStartingOrentation() {
        return startingOrentation;
    }

    public void setStartingOrentation(int offset) {
        navX.setAngleAdjustment(offset);
    }

    public double getAngle() {
        return Utilities.formatAngle(navX.getAngle());
    }

    public void zeroHeading() {
        navX.zeroYaw();
    }

    public double getYaw() {
        return navX.getYaw();
    }

    public boolean isTipped() {
        return Math.abs(Utilities.angleDifference(0, navX.getPitch())) > 10
                || Math.abs(Utilities.angleDifference(0, navX.getRoll())) > 10;
    }

    public double getPitch() {
        return navX.getPitch();
    }

    public double getRoll() {
        return navX.getRoll();
    }

    public void gyroTest() {
        System.out.println("Pitch: " + Math.round(navX.getPitch()) + " Roll: " + Math.round(navX.getRoll()) + " Yaw: "
                + Math.round(navX.getYaw()));
    }

    public double getTemperature() {
        return (navX.getTempC() * 9 / 5 + 32);
    }

    public boolean isMoving() {
        return navX.isMoving();
    }

    public double getAccelerationX() {
        return navX.getRawAccelX();
    }

    public double getAccelerationY() {
        return navX.getRawAccelY();
    }

    public double getVelocityX() {
        return navX.getVelocityX();
    }

    public double getVelocityY() {
        return navX.getVelocityY();
    }

    public double getDisplacementX() {
        return navX.getDisplacementX();
    }

    public double getDisplacementY() {
        return navX.getDisplacementY();
    }

    public double getDisplacementZ() {
        return navX.getDisplacementZ();
    }

    public double getAltitude() {
        return navX.getAltitude();
    }

    public double getBarometricPressure() {
        return navX.getBarometricPressure();
    }

    public double getCompassHeading() {
        return navX.getCompassHeading();
    }

    public boolean isCollisionDetected(){
        return collisionDetected;
    }
}
