// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc250.FRCDeepSpace2019.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc250.FRCDeepSpace2019.Robot;
import org.usfirst.frc250.FRCDeepSpace2019.Prefs2;

/**
 *
 */
public class Drive extends Command {
	private double left;
	private double right;
	private	double turn = 1;
	private double half = 1;
	private double reverse = 1;
	private double joystickY = 0;
	private double joystickZ = 0;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public Drive() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	requires(Robot.driveTrain);
}

	// Called just before this Command runs the first time
	protected void initialize() {
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		

		// when going fast makes turning more gradual otherwise turn normally

			half = Robot.driveTrain.isHalfPower() ? .5 :1;
			reverse = Robot.driveTrain.isReversed() ? -1:1;
			turn = Robot.driveTrain.isTurnDisabled() ? 0:1;

			joystickY = Robot.oi.getYDrive();
			joystickZ = Robot.oi.getZDrive();

			joystickY = Math.pow(joystickY, 3);
			joystickZ = Math.pow(joystickZ, 3);

			left = (joystickY + joystickZ*turn)*half*reverse;
			right = (joystickY - joystickZ*turn)*half*reverse;

		Robot.driveTrain.drive(left, right);
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.driveTrain.drive(0, 0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		this.end();
	}
}
